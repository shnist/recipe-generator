{
  "name": "eraro",
  "version": "0.1.6",
  "description": "Create JavaScript Error objects with code strings, context details, and templated messages.",
  "main": "eraro.js",
  "scripts": {
    "test": "node test/eraro.test.js",
    "jshint": "jshint eraro.js",
    "docco": "docco eraro.js -o doc",
    "gh-pages-doc": "cp -r doc/* ../gh-pages/eraro/doc"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rjrodger/eraro.git"
  },
  "keywords": [
    "eraro",
    "error"
  ],
  "author": {
    "name": "Richard Rodger",
    "url": "http://richardrodger.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/rjrodger/eraro/issues"
  },
  "homepage": "https://github.com/rjrodger/eraro",
  "dependencies": {
    "underscore": "~1.6.0"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "docco": "~0.6.3",
    "jshint": "~2.5.0"
  },
  "files": [
    "README.md",
    "LICENSE.txt",
    "eraro.js"
  ],
  "readme": "eraro\n=====\n\n#### Create JavaScript Error objects with code strings, context details, and templated messages.\n\nThere is [annotated source code](http://rjrodger.github.io/eraro/doc/eraro.html) for this module.\n\nFor use in library modules to generate contextual errors with useful\nmeta data. Your library module can throw or pass (to a callback) an\n_Error_ object that has additional properties, such as a _code_, that\ncan be used for programmatic inspection by client code that uses your\nlibrary.\n\nSee the [use-plugin](http://github.com/rjrodger/use-plugin) module for an example of practical usage.\n\n\n# Quick example\n\n```JavaScript\n\nvar error = require('eraro')({package:'mylib'})\n\n// throw an Error object that has a code\nthrow error('code_string')\n\n// provide a user message\nthrow error('code_string', 'Message text.')\n\n// supply context details for error\nthrow error('code_string', 'Message text.', {foo:1, bar:2})\n\n// extend an existing Error object\nvar ex = new Error('Another message.')\nthrow error(ex,'code_string',{zed:3})\n```\n\nIn all these cases, the Error object will have a _code_ property with value _\"code_string\"_.\n\n\n# Install\n\n```bash\nnpm install eraro\n```\n\nThere's an [npm module page for eraro](https://www.npmjs.org/package/eraro).\n\n\n# Usage\n\nUse this module when you are writing a library that will be used by\napplication code. It allows your library to generate informative error messages.\n\nThe module itself is a generator function (taking options) that\nreturns the error-creating function that you will actually use. Thus\nthe most common way to use _eraro_ is to require and call immediately:\n\n```JavaScript\nvar error = require('eraro')({package:'mylib'})\n```\n\nThe _error_ function can then be used in your library code. The\n_error_ function generates _Error_ objects, which can be thrown or used in callbacks:\n\n```JavaScript\nthrow error('code1')\n\nfunction doStuff( input, callback ) {\n  if( bad( input ) ) return callback( error('code2') );\n}\n```\n\nThe _package_ option is normally the name of your library. That is, the value\nthe _name_ property in _package.json_. The generated Error object will\nhave two properties to define the package: _package_, a string that is\nthe name of the package, and also a boolean, the name of the package itself.\nThis lets you check for the type of error easily:\n\n```JavaScript\nvar error = require('eraro')({package:'mylib'})\n\nvar err0 = error('code0')\n\"mylib\" === err0.package // true\nerr0.mylib // true\n```\n\n\n## Error details\n\nYou can supply additional contextual details for debugging or other\npurposes. These are placed inside the _details_ property of the\ngenerated Error:\n\n```JavaScript\nvar error = require('eraro')({package:'mylib'})\n\nvar err0 = error('code0',{foo:'FOO',bar:'BAR'})\n\"FOO\" === err0.details.foo\n\"BAR\" === err0.details.bar\n```\n\n\n\n## Error codes and message templates\n\nTo provide consistent error messages to your users, you can define a set of message templates, keyed by code:\n\n```JavaScript\nvar error = require('eraro')({package:'mylib',msgmap:{\n  code0: \"The first error, foo is <%=foo%>.\",\n  code1: \"The second error, bar is <%=bar%>.\",\n}})\n```\n\nWhen you specify a code, and details, these are inserted into the message (if any) associated with that code:\n\n```JavaScript\nvar err0 = error('code0',{foo:'FOO',bar:'BAR'})\n\"mylib: The first error, foo is FOO.\" === err0.message\n```\n\nThe message templates are [underscorejs templates](http://underscorejs.org/#template) \nwith the default settings.\n\nIf you specify a message directly, this is also interpreted as a template:\n\n```JavaScript\nvar err0 = error('code2',\n                 'My custom message, details: <%=util.inspect(zed)%>', \n                 {zed:{a:1,b:2}})\n\"mylib: My custom message, details: { a: 1, b: 2 }\" === err0.message\n```\n\n\n# The returned Error object\n\nThe returned Error object has the following additional properties:\n\n   * _code_: String; the code string\n   * _package_: String; the package name\n   * _**package-name**_: Boolean (true); a convenience marker for the package\n   * _msg_: String; the generated message, may differ from original exception message (if any)\n   * _details_: Object; contextual details of error\n   * _callpoint_: String; first line of stacktrace that is external to eraro and calling module \n\nYou can pass in an existing Error object. The additional properties\nwill be added to it, but the original message will be used as the\nmessage template, overriding any matching code message.\n\n\n\n# In the Wild\n\nFor real-world usage examples, see:\n\n  * _[use-plugin](http://github.com/rjrodger/use-plugin)_: a utility for providing a plugin interface for extensions to your module\n\n\n# Support\n\nIf you're using this module, feel free to contact me on twitter if you have any questions! :) [@rjrodger](http://twitter.com/rjrodger)\n\nCurrent Version: 0.1.6\n\nTested on: node 0.10.28, 0.11.13\n\n[![Build Status](https://travis-ci.org/rjrodger/eraro.png?branch=master)](https://travis-ci.org/rjrodger/eraro)\n\n[Annotated Source](http://rjrodger.github.io/eraro/doc/eraro.html)\n",
  "readmeFilename": "README.md",
  "_id": "eraro@0.1.6",
  "dist": {
    "shasum": "b5a0fe08c1404351ab230ff8cc079a085d207bad"
  },
  "_from": "eraro@~0.1.6",
  "_resolved": "http://registry.npmjs.org/eraro/-/eraro-0.1.6.tgz"
}
